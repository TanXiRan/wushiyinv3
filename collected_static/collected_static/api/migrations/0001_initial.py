# Generated by Django 4.1.3 on 2022-12-06 14:12

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128, verbose_name='动漫名称')),
                ('abstract', models.CharField(blank=True, max_length=256, null=True, verbose_name='简介')),
                ('score', models.CharField(blank=True, max_length=8, null=True, verbose_name='评分')),
                ('poster', models.FileField(blank=True, null=True, upload_to='anime_poster', verbose_name='封面')),
            ],
            options={
                'verbose_name_plural': '动漫推荐',
            },
        ),
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('path', models.FileField(upload_to='user_avatar/', verbose_name='用户头像路径')),
            ],
            options={
                'verbose_name_plural': '用户头像',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=8, verbose_name='分类名')),
                ('en_name', models.CharField(blank=True, max_length=16, null=True, verbose_name='分类英文名')),
            ],
            options={
                'verbose_name_plural': '发音分类名',
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, verbose_name='章节名称')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.category', verbose_name='章节分类')),
            ],
            options={
                'verbose_name_plural': '章节',
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ping', models.CharField(max_length=8, verbose_name='平假名')),
                ('pian', models.CharField(max_length=8, verbose_name='片假名')),
                ('spelling', models.CharField(max_length=8, verbose_name='罗马拼音')),
                ('spelling_path', models.CharField(blank=True, max_length=64, null=True, verbose_name='字符发音地址')),
                ('ping_path', models.CharField(blank=True, max_length=64, null=True, verbose_name='平假名笔顺图路径')),
                ('pian_path', models.CharField(blank=True, max_length=64, null=True, verbose_name='片假名笔顺图路径')),
                ('pro_skill', models.CharField(blank=True, max_length=128, null=True, verbose_name='发音技巧')),
                ('pro_skill_image_path', models.CharField(blank=True, max_length=64, null=True, verbose_name='发音技巧图片地址')),
                ('memory', models.CharField(blank=True, max_length=128, null=True, verbose_name='联想记忆')),
                ('memory_path', models.CharField(blank=True, max_length=64, null=True, verbose_name='联想记忆图片地址')),
                ('scene_text', models.CharField(max_length=128, verbose_name='名场面文字')),
                ('scene_cn_text', models.CharField(blank=True, max_length=128, null=True, verbose_name='名场面中文')),
                ('scene_gif_path', models.CharField(blank=True, max_length=64, null=True, verbose_name='名场面动图地址')),
                ('scene_text_path', models.CharField(blank=True, max_length=32, null=True, verbose_name='名场面来源')),
                ('scene_spelling_path', models.CharField(blank=True, max_length=64, null=True, verbose_name='名场面语音地址')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.chapter', verbose_name='所属章节')),
            ],
            options={
                'verbose_name_plural': '五十音字符',
            },
        ),
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=12, verbose_name='单词名')),
                ('explanation', models.CharField(blank=True, max_length=12, null=True, verbose_name='单词解释')),
                ('pronounce_url', models.CharField(blank=True, max_length=32, null=True, verbose_name='单词发音地址')),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.character', verbose_name='五十音字符')),
            ],
            options={
                'verbose_name_plural': '相关单词',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('gender', models.CharField(choices=[('m', '男'), ('f', '女'), ('s', '保密')], default='s', max_length=1, verbose_name='性别')),
                ('tel', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('max_score', models.IntegerField(default=0, verbose_name='五十音游戏最高得分')),
                ('mini_time', models.CharField(blank=True, max_length=16, null=True, verbose_name='五十音游戏最短时间')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('anime', models.ManyToManyField(blank=True, to='api.anime', verbose_name='收藏的动漫')),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.avatar', verbose_name='用户头像')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('learned_chapter', models.ManyToManyField(related_name='learnedChapters', to='api.chapter', verbose_name='学习过的章节')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
